1. Describe an analogy for relating an algorithm that has efficiency O(1) and another algorithm that has O(2n).

An algorithm that has O(1) is a Lamborghini and an algorithm that has O(2n) is a Smart Car.

2. In plain English, what is the best case scenario for binary search?

The best case scenario for binary search could be to find the element on the first iteration. 
This could be possible if the target element is the middle element already, as that is the value
that will get returned. 

3. In plain English, what is the worst-case scenario for binary search?

Excluding the scenario where the element is not present in the data set, as this would be the worst case scenario
for any searching algorithm, the worst-case scenario would be when the element is not found present until the final
'divide-and-conquer' iteration. i.e element is very near start/end of data set.

4. In plain English, what is the bounded-case scenario for binary search?

The bounded case scenario would have a best case scenario of finding the element on the first iteration, and a
worst case scenario of finding the element on the last iteration. These would provide our upper and lower bounds
and so the bounded case scenario would be in between these two bounds.

5. Create a graph using the data below. Here's a CSV with the values you'll need.

(see line_graph.png)

6. What is the limit of the function above as n approaches infinity?

As n approaches infinity the limit of the above function (which I believe is f(n) = 2^n) will be infinity.

7. What is the Big-O of an algorithm that has the data points above?

The Big-O analysis would be O(2^n) or Big-O of exponential time. 

8. Write a Ruby method that takes a number n. This method must print the worst-case number of iterations for linear search 
to find an item in collections of size one to n. Use it to generate a table of worst-case iterations of collections up to size 10.

(see linear_ruby.rb)

9. Create a graph from the output using Google Sheets or other graphing software. Analyze the graph and denote its Big-O somewhere on the graph.

(see linear_graph.png)

10. What is the Big-O of binary search?

Big-O, or the worst case scenario of binary search would be O(log n), or Big-O of logarithmic time. Due to the 'divide-and-conquer' 
nature of this search method, it means that the maximum number of iterations needed for a data set of size n can be displayed 
mathmetically as log(n) (with a log-base of 2). 

11. What is the Big-Ω of binary search?

The Big-Omega, or the best-case scenario of binary search would be Big-Omega of constant time or Ω(1). This would be
possible if the target element is located in the middle of the data set, and could be returned on the first iteration.

12. What is the Big-Ө of binary search?

The Big-Theta of binary search would be Ө(log n), or Big-Theta of logarithmic time.
